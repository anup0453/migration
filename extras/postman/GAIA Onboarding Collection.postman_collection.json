{
  "info": {
    "_postman_id": "337d1de7-7c51-4b98-bdb3-86728464297c",
    "name": "20-05-2025 - GAIA Onboarding Collection",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "23207411"
  },
  "item": [
    {
      "name": "client",
      "item": [
        {
          "name": "OpenAI",
          "item": [
            {
              "name": "Chat Completion with deploymentName",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"messages\": [\r\n        {\r\n            \"role\": \"user\",\r\n            \"content\": \"when is the next sl benfica match?\"\r\n        }\r\n    ]\r\n    // ,\r\n    // \"maxTokens\": 1500,\r\n    // \"temperature\": 0.1,\r\n    // \"frequencyPenalty\": 0,\r\n    // \"presencePenalty\": 0,\r\n    // \"stop\": [\"\"],\r\n    // \"topP\": 0.9,\r\n    // \"topN\": 5, \r\n    // \"internalTools\": [\"\"], \r\n    // \"filter\": [\"folder1 eq 'tree1'\"],\r\n    // \"keywords\": [\"colors\", \"trees\"],\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/openai/deployments/:deploymentName/chat/completions",
                  "host": ["{{base_url}}"],
                  "path": [
                    "openai",
                    "deployments",
                    ":deploymentName",
                    "chat",
                    "completions"
                  ],
                  "variable": [
                    {
                      "key": "deploymentName",
                      "value": "gpt-4o"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Chat Completion without deploymentName",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"messages\": [\r\n        {\r\n            \"role\": \"system\",\r\n            \"content\": \"You are a helpful ai assistant.\"\r\n        },\r\n        {\r\n            \"role\": \"user\",\r\n            \"content\": \"1+1?\"\r\n        }\r\n    ],\r\n    \"model\": \"gpt-4o\"\r\n    // ,\r\n    // \"maxTokens\": 1500,\r\n    // \"temperature\": 0.1,\r\n    // \"frequencyPenalty\": 0,\r\n    // \"presencePenalty\": 0,\r\n    // \"stop\": [\"\"],\r\n    // \"topP\": 0.9,\r\n    // \"topN\": 5, \r\n    // \"internalTools\": [\"snowflake\"],\r\n    // \"filter\": [\"folder1 eq 'tree1'\"],\r\n    // \"keywords\": [\"colors\", \"trees\"],\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/v1/chat/completions",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "chat", "completions"]
                }
              },
              "response": []
            },
            {
              "name": "Embedding",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"input\": \"what is the acp level?\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/openai/deployments/:deploymentName/embeddings",
                  "host": ["{{base_url}}"],
                  "path": [
                    "openai",
                    "deployments",
                    ":deploymentName",
                    "embeddings"
                  ],
                  "variable": [
                    {
                      "key": "deploymentName",
                      "value": "text-embedding-ada-002"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "File",
          "item": [
            {
              "name": "Get Access to File",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/v1/download/:fileName/datasource/:datasourceId",
                  "host": ["{{base_url}}"],
                  "path": [
                    "v1",
                    "download",
                    ":fileName",
                    "datasource",
                    ":datasourceId"
                  ],
                  "variable": [
                    {
                      "key": "fileName",
                      "value": "<file name>"
                    },
                    {
                      "key": "datasourceId",
                      "value": "<datasource id>"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "auth": {
            "type": "basic",
            "basic": [
              {
                "key": "password",
                "value": "{{apiKey}}",
                "type": "string"
              },
              {
                "key": "username",
                "value": "{{username}}",
                "type": "string"
              }
            ]
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            },
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [""]
              }
            }
          ]
        },
        {
          "name": "Customer",
          "item": [
            {
              "name": "Api Key",
              "item": [
                {
                  "name": "Create new api key",
                  "request": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"description\": \"My new key\"\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{base_url}}/v1/customer/apiKey",
                      "host": ["{{base_url}}"],
                      "path": ["v1", "customer", "apiKey"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "List all api keys",
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{base_url}}/v1/customer/apiKey",
                      "host": ["{{base_url}}"],
                      "path": ["v1", "customer", "apiKey"]
                    }
                  },
                  "response": []
                },
                {
                  "name": "get api key by id",
                  "request": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{base_url}}/v1/customer/apiKey/:id",
                      "host": ["{{base_url}}"],
                      "path": ["v1", "customer", "apiKey", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "<apiKeyId>"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Delete api key",
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "url": {
                      "raw": "{{base_url}}/v1/customer/apiKey/:id",
                      "host": ["{{base_url}}"],
                      "path": ["v1", "customer", "apiKey", ":id"],
                      "variable": [
                        {
                          "key": "id",
                          "value": "<apiKeyId>"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Get customer",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/v1/customer",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "customer"]
                }
              },
              "response": []
            },
            {
              "name": "Update customer settings",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"summarizeConversationSystemMessage\": \"Act as an assistant who summarizes each conversation. Retain detailed technical information while condensing the overall context and flow of the conversation into high-level points. Present the summary in bullet points. Using a maximum of 250 tokens.\",\r\n    \"reactOnUserMessageSystemMessage\": \"If the <UserPrompt> provides a question, answer the question based on previous interactions  and the given context <Sources>. Answer ONLY based on the facts listed in the sources <Sources> below and previous interactions <History>. If the user just stated information for later use acknowledge that info and ask for further steps.\",\r\n    \"sourceLinkInstructionSystemMessage\": \"# HOW TO INCLUDE SOURCES AND CITATIONS IN THE ANSWERS\\\\nYou are going to be provided with a <UserPrompt> and <Sources>, the <Sources> contain <context> items that you can use to support your answer.\\\\nEach <context> item is associated with a fileId that you have to use to reference the source on the bottom of your response.\\\\n<context> items can be part of the same file and thus have the same fileId but a deviating citationId.\\\\n## Input Example:\\\\n<UserPrompt>\\\\n        What do you think is the best way to learn a new language?\\\\n<\\/UserPrompt>\\\\n\\\\n  \\\\n<Sources>\\\\n        <context citationId='1' fileId='someId1'> There are language apps like Duoling that can help with learning a language. <\\/context>\\\\n        <context citationId='2' fileId='someId2'> German is a hard language to learn. Languages like Spanish tend to be easier. <\\/context>\\\\n        <context citationId='3'> A good way of learning in General is stay consistent and to not overwhelm yourself. <\\/context>\\\\n        <context citationId='4' fileId='someId1'> getting into everyday conversations is usefull although frightening to a lot of people. Be brave and learn by using the language you want to learn. <\\/context>\\\\n\\t<context citationId='5' fileId='someId3'> Consistency is the key to learning a new language. <\\/context>\\\\n<\\/Sources>\\\\n## Steps to Follow:\\\\n1. You will be provided with a <Sources> and a <UserPrompt> section.\\\\n2. Find an answer to the <UserPrompt> based on the <context> items provided in the <Sources> section and the previous message history.\\\\n3. Cite all fileIds of the sources used in the response with used by their citation number in brackets after their use, e.g. [1]. Only cite sources that have a fileId provided.\\\\n4. Utilize the provided context (e.g. <context citationId='x' fileId='someIdy'>) for the citation at the end of the response as shown in the Output Example below.\\\\n5. The list of sources\\/citations at the end of the response does only include the citationIds used in the citation from within the response text in brackets followed by the fileId y without brackets (e.g. '[x] y' -> '[1][4] someId1' or '[5] someId3')\\\\n6. Several citationIds can lead to the same fileId and should be merged in one line, (e.g. '[1][4] someId1')\\\\n## Output Example:\\\\nThe best way to learn a new language is to stay consistent and not overwhelm yourself.[5] It is also helpful to use language apps like Duolingo\\\\nand to engage in everyday conversations to practice the language. [1][4] Being brave and using the language you want to learn in conversations\\\\ncan be a great way to improve your skills. [4]\\\\n    \\\\n- [1][4] someId1\\\\n- [5] someId3\\\\n## Additional Notes:\\\\n### Error Handling:  \\\\n- If no sources are found, provide the best possible answer based on available information.  \\\\n### Consistency:  \\\\n- Ensure all responses adhere to the above instructions consistently.  \\\\n- Double-check citation numbers and fileIds for accuracy.  \\\\n### Fallback Instructions:  \\\\n- If unable to follow the primary instructions, provide a clear and concise answer without citations.\",\r\n    \"generateSearchQuerySystemMessage\": \"You are an intelligent AI assistant, your primary function is to craft precise search queries that will be utilized by the Cognitive Search system to retrieve relevant documents according to the given chat history. Your output should consist solely of the formulated question that is optimized for search effectiveness. OUTPUT only the created question. OUTPUT in the language of the last user prompt. Using a maximum of 250 tokens.\",\r\n    \"welcomeSystemMessage\": \"Hello and welcome to your personal assistant! Ask me anything! \\uD83D\\uDE0A\\r\\n\\r\\nTo reset the chat history insert: \\/reset\\r\\n\\r\\nIf you need help insert: \\/help\",\r\n    \"topN\": 7,\r\n    \"sourceLinkActive\": true,\r\n    \"dynamicNActive\": false,\r\n    \"temperature\": 0.0,\r\n    \"maxResponseTokens\": 1200, \r\n    \"topP\": 0.2,\r\n    \"presencePenalty\": 0,\r\n    \"frequencyPenalty\": 0,\r\n    \"stop\": null,\r\n    \"historyCount\": 10,\r\n    \"loadBalancerRegion\": \"emea\",\r\n    \"defaultGptVersion\": \"gpt-4o\",\r\n    \"defaultEmbeddingVersion\": \"text-embedding-ada-002\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/v1/customer/settings",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "customer", "settings"],
                  "query": [
                    {
                      "key": "id",
                      "value": "",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update customer frontend settings",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"frontendSettings\": {\r\n        \"welcomeSystemMessage\": \"Hello and welcome! Ask me anything and I will find a Siemens product according to the specification typped! \\uD83D\\uDE0A\\r\\n\\r\\nTo reset the chat history insert: \\/reset\\r\\n\\r\\nIf you need help insert: \\/help\",\r\n        // \"hintTextButtonText\": \"Click on the blue icon to reset the history\",\r\n        // \"termsOfUseText\": \"Custom terms of use text\",\r\n        // \"historyResetMessage\": \"The history has been cleared\",\r\n        \"filterButtons\": [\r\n            {\r\n                \"displayName\": \"Test\",\r\n                \"keywords\": [\r\n                    \"VSR WIKI\"\r\n                ],\r\n                \"filter\": [\r\n                    \"folder1 eq 'tree1'\"\r\n                ],\r\n                \"fieldType\": \"Default\"\r\n                // \"fieldType\": \"ChoiceSet\",\r\n                // \"placeholder\": \"Field placeholder\",\r\n                // \"level\": 1,\r\n                // \"isMultiSelect\": true\r\n            },\r\n            {\r\n                \"displayName\": \"Button2\",\r\n                \"keywords\": [\r\n                    \"keyword3\",\r\n                    \"keyword4\"\r\n                ],\r\n                \"filter\": [\r\n                    \"folder1 eq 'tree2'\"\r\n                ],\r\n                \"fieldType\": \"Default\"\r\n                // \"fieldType\": \"ChoiceSet\",\r\n                // \"placeholder\": \"Field placeholder\",\r\n                // \"level\": 1,\r\n                // \"isMultiSelect\": true\r\n            }\r\n        ]\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/v1/customer/frontendSettings",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "customer", "frontendSettings"],
                  "query": [
                    {
                      "key": "id",
                      "value": "",
                      "disabled": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "(!Be cautious!) Delete customer",
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/v1/customer",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "customer"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Datasource",
          "item": [
            {
              "name": "List all datasources",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/v1/datasource",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "datasource"]
                }
              },
              "response": []
            },
            {
              "name": "Get datasource by id",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/v1/datasource/:id",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "datasource", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "<datasource id>"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update datasource by id",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"displayName\": \"<datasource-name>\",\r\n    \"frequency\": \"24h\",\r\n    \"settings\": {\r\n        \"azureBlobStorage\": {\r\n            \"connectionString\": \"<connection string from azure blob storage\",\r\n            \"containerName\": \"<name of container in azure blob storage>\"\r\n        }\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/v1/datasource/:id",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "datasource", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "<datasource id>"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create datasource",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"displayName\": \"<datasource-name>\",\r\n    \"frequency\": \"24h\",\r\n    \"settings\": {\r\n        \"azureBlobStorage\": {\r\n            \"connectionString\": \"<connection string from azure blob storage\",\r\n            \"apiKey\": \"<api key from azure blob storage\",\r\n            \"containerName\": \"<name of container in azure blob storage>\"\r\n        },\r\n        \"sourceLinkActive\": true,\r\n        \"useMarkdown\": true\r\n    },\r\n    \"aiSearch\": {\r\n        \"skillsetName\": \"embeddings-relativepath-skillset\"\r\n    },\r\n    \"keywords\": []\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/v1/datasource",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "datasource"]
                }
              },
              "response": [
                {
                  "name": "Create datasource (blob)",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"displayName\": \"<datasource-name>\",\r\n    \"frequency\": \"24h\",\r\n    \"settings\": {\r\n        \"azureBlobStorage\": {\r\n            \"connectionString\": \"<connection string from azure blob storage\",\r\n            \"containerName\": \"<name of container in azure blob storage>\"\r\n        }\r\n        // \"chunkSize\": 2000,\r\n        // \"chunkOverlap\": 15,\r\n        // \"defaultLanguage\": \"en\",\r\n        // \"delimiter\": [\">\", \"}\"],\r\n        // \"excludeByRegex\": [\"myRegex1\"],\r\n        // \"includeByRegex\": \"[\"myRegex2\", \"myRegex3\"]\",\r\n        // \"ocrActive\": false,\r\n        // \"preventXMLToJSON\": \"false\",\r\n        // \"sourceLinkActive\": \"true\",\r\n        // \"textSplitterStrategy\": \"delimiter\",\r\n        // \"translationActive\": false,\r\n        // \"useMarkdown\": \"true\",\r\n    },\r\n    \"keywords\": []\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{base_url}}/v1/datasource",
                      "host": ["{{base_url}}"],
                      "path": ["v1", "datasource"]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "Create datasource (website)",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"displayName\": \"<datasource-name>\",\r\n    \"frequency\": \"24h\",\r\n    \"settings\": {\r\n        \"website\": {\r\n            \"rootUrls\": [\r\n                \"<root url>\"\r\n            ],\r\n            \"urlWhiteList\": [\r\n                \"<white list entry>\"\r\n            ],\r\n            \"recursionDepth\": 1,\r\n            \"contentCssSelectors\": [],\r\n            \"crawlCssSelectors\": [],\r\n            \"scrollableElementSelector\": \"body\",\r\n            \"lazyLoadingEnforced\": false\r\n        }\r\n        // \"chunkSize\": 2000,\r\n        // \"chunkOverlap\": 15,\r\n        // \"defaultLanguage\": \"en\",\r\n        // \"delimiter\": [\">\", \"}\"],\r\n        // \"excludeByRegex\": [\"myRegex1\"],\r\n        // \"includeByRegex\": \"[\"myRegex2\", \"myRegex3\"]\",\r\n        // \"ocrActive\": false,\r\n        // \"preventXMLToJSON\": \"false\",\r\n        // \"sourceLinkActive\": \"true\",\r\n        // \"textSplitterStrategy\": \"delimiter\",\r\n        // \"translationActive\": false,\r\n        // \"useMarkdown\": \"true\",\r\n    },\r\n    \"keywords\": []\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{base_url}}/v1/datasource",
                      "host": ["{{base_url}}"],
                      "path": ["v1", "datasource"]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "Create datasource (sharepoint)",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"displayName\": \"<datasource-name>\",\r\n    \"frequency\": \"24h\",\r\n    \"settings\": {\r\n        \"sharepoint\": {\r\n            \"url\": \"<sharepoint url like: https://siemens.sharepoint.com/teams/DI-GAIA-DEV>\",\r\n            \"elements\": [\r\n                \"lists\",\r\n                \"pages\"\r\n            ],\r\n            \"whiteList\": [],\r\n            \"pageWhiteList\": []\r\n        }\r\n        // \"chunkSize\": 2000,\r\n        // \"chunkOverlap\": 15,\r\n        // \"defaultLanguage\": \"en\",\r\n        // \"delimiter\": [\">\", \"}\"],\r\n        // \"excludeByRegex\": [\"myRegex1\"],\r\n        // \"includeByRegex\": \"[\"myRegex2\", \"myRegex3\"]\",\r\n        // \"ocrActive\": false,\r\n        // \"preventXMLToJSON\": \"false\",\r\n        // \"sourceLinkActive\": \"true\",\r\n        // \"textSplitterStrategy\": \"delimiter\",\r\n        // \"translationActive\": false,\r\n        // \"useMarkdown\": \"true\",\r\n    },\r\n    \"keywords\": []\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{base_url}}/v1/datasource",
                      "host": ["{{base_url}}"],
                      "path": ["v1", "datasource"]
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "Create datasource (polarion)",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"displayName\": \"<datasource-name>\",\r\n    \"frequency\": \"24h\",\r\n    \"settings\": {\r\n        \"polarion\": {\r\n            \"endpoint\": \"https://apepolarion-dev-2310.plmmscloudsolutions.com/polarion\",\r\n            \"accessToken\": \"<accessToken>\",\r\n            \"project\": \"AKM_Kn_Artifact_Template_Project\",\r\n            \"query\": \"type:(akm_checklist akm_exmpl_del akm_guidance akm_howto akm_lessons akm_practice akm_template akm_white_paper) AND status:published\",\r\n            \"fields\": [\r\n                \"description\",\r\n                \"status\",\r\n                \"updated\",\r\n                \"title\"\r\n            ]\r\n        }\r\n        // \"chunkSize\": 2000,\r\n        // \"chunkOverlap\": 15,\r\n        // \"defaultLanguage\": \"en\",\r\n        // \"delimiter\": [\">\", \"}\"],\r\n        // \"excludeByRegex\": [\"myRegex1\"],\r\n        // \"includeByRegex\": \"[\"myRegex2\", \"myRegex3\"]\",\r\n        // \"ocrActive\": false,\r\n        // \"preventXMLToJSON\": \"false\",\r\n        // \"sourceLinkActive\": \"true\",\r\n        // \"textSplitterStrategy\": \"delimiter\",\r\n        // \"translationActive\": false,\r\n        // \"useMarkdown\": \"true\",\r\n    },\r\n    \"keywords\": []\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{base_url}}/v1/datasource",
                      "host": ["{{base_url}}"],
                      "path": ["v1", "datasource"]
                    }
                  },
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "Create datasource (api)",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"displayName\": \"<datasource-name>\",\r\n    \"frequency\": \"24h\",\r\n    \"settings\": {\r\n        \"api\": {\r\n            \"endpoint\": \"<api-route>\",\r\n            \"authorizationHeader\": \"<bearer or basic token>\",\r\n            \"extraHeaders\": [\r\n                {\r\n                    \"key\": \"<key>\",\r\n                    \"value\": \"<value>\"\r\n                }\r\n            ],\r\n            \"fileNameField\": \"<schema definition of the field defining the fielName (unique)>\",\r\n            \"payloadField\": \"<schema deginition of the field defining what is the payload (array with items to be chunked)>\",\r\n            \"includeFields\": [],\r\n            \"excludeFields\": [],\r\n            \"updatedAtField\": \"<schema definition of the field that defines the date within an item in the payload when the item was modified last>\"\r\n        }\r\n        // \"chunkSize\": 2000,\r\n        // \"chunkOverlap\": 15,\r\n        // \"defaultLanguage\": \"en\",\r\n        // \"delimiter\": [\">\", \"}\"],\r\n        // \"excludeByRegex\": [\"myRegex1\"],\r\n        // \"includeByRegex\": \"[\"myRegex2\", \"myRegex3\"]\",\r\n        // \"ocrActive\": false,\r\n        // \"preventXMLToJSON\": \"false\",\r\n        // \"sourceLinkActive\": \"true\",\r\n        // \"textSplitterStrategy\": \"delimiter\",\r\n        // \"translationActive\": false,\r\n        // \"useMarkdown\": \"true\",\r\n    },\r\n    \"keywords\": []\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{base_url}}/v1/datasource",
                      "host": ["{{base_url}}"],
                      "path": ["v1", "datasource"]
                    }
                  },
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                },
                {
                  "name": "Create datasource (wiki)",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n    \"displayName\": \"<datasource-name>\",\r\n    \"frequency\": \"24h\",\r\n    \"settings\": {\r\n        \"wiki\": {\r\n            \"baseUrl\": \"<baseUrl>\"\r\n        }\r\n        // \"chunkSize\": 2000,\r\n        // \"chunkOverlap\": 15,\r\n        // \"defaultLanguage\": \"en\",\r\n        // \"delimiter\": [\">\", \"}\"],\r\n        // \"excludeByRegex\": [\"myRegex1\"],\r\n        // \"includeByRegex\": \"[\"myRegex2\", \"myRegex3\"]\",\r\n        // \"ocrActive\": false,\r\n        // \"preventXMLToJSON\": \"false\",\r\n        // \"sourceLinkActive\": \"true\",\r\n        // \"textSplitterStrategy\": \"delimiter\",\r\n        // \"translationActive\": false,\r\n        // \"useMarkdown\": \"true\",\r\n    },\r\n    \"keywords\": []\r\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{base_url}}/v1/datasource",
                      "host": ["{{base_url}}"],
                      "path": ["v1", "datasource"]
                    }
                  },
                  "_postman_previewlanguage": "Text",
                  "header": [],
                  "cookie": [],
                  "body": ""
                }
              ]
            },
            {
              "name": "Delete Datasource by Id",
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/v1/datasource/:id",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "datasource", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "<datasource id>"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "KPI",
          "item": [
            {
              "name": "Get KPI",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/v1/kpi?from=2024-03-01&to=2024-05-20&scale=day&type=embedding,total,chatRequest,translation,internalToolCall",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "kpi"],
                  "query": [
                    {
                      "key": "from",
                      "value": "2024-03-01",
                      "description": "ISODate"
                    },
                    {
                      "key": "to",
                      "value": "2024-05-20",
                      "description": "ISODate"
                    },
                    {
                      "key": "scale",
                      "value": "day",
                      "description": "[minute,hour,day,month,week,year]"
                    },
                    {
                      "key": "type",
                      "value": "embedding,total,chatRequest,translation,internalToolCall",
                      "description": "[embedding,total,chatRequest,translation,subscription,customCharge]"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Agent",
          "item": [
            {
              "name": "List all Agents",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/v1/agent",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "agent"]
                }
              },
              "response": []
            },
            {
              "name": "Get Agent by id",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/v1/agent/:id",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "agent", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "<id>"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Update Agent",
              "request": {
                "method": "PATCH",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"apiKey\": \"blablabla\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/v1/agent/:id",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "agent", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "<id>"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "Create Agent",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"displayName\": \"<agent name>\",\r\n    \"type\": \"react\", //or custom\r\n    \"description\": \"<description of agent>\",\r\n    \"systemMessage\": \"<agent system message>\",\r\n    \"iterationLimit\": 3,\r\n    \"tracingSpace\": \"\",\r\n    \"tracingProject\": \"\",\r\n    \"tracingKey\": \"\",\r\n    \"bindTools\": [\r\n                    {\r\n                        \"type\": \"rag\",\r\n                        \"agentToolApiKey\": \"\",\r\n                        \"description\": \"\",\r\n                        \"agentToolName\": \"\"\r\n                    },\r\n                    {\r\n                        \"type\": \"bing\",\r\n                        \"agentToolApiKey\": \"\",\r\n                        \"description\": \"\",\r\n                        \"agentToolName\": \"\"\r\n                    }\r\n                ],\r\n    \"settings\":\r\n    {\r\n        \"agentDeploymentName\": \"\",\r\n        \"agentApiVersion\": \"\"\r\n    }\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/v1/agent",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "agent"]
                }
              },
              "response": []
            },
            {
              "name": "Delete Agent",
              "request": {
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/v1/agent/:id",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "agent", ":id"],
                  "variable": [
                    {
                      "key": "id",
                      "value": "<id>"
                    }
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "AiSearch",
          "item": [
            {
              "name": "Get Documents",
              "request": {
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"search\": \"Process steps in parallel Pipeline\",\r\n  \"count\": true,\r\n  \"queryType\": \"semantic\",\r\n  \"semanticConfiguration\": \"default\",\r\n   \"top\": 5\r\n    // \"helixSearch\": false\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{base_url}}/v1/aiSearch/getRecords",
                  "host": ["{{base_url}}"],
                  "path": ["v1", "aiSearch", "getRecords"]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "Ping",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/v1",
              "host": ["{{base_url}}"],
              "path": ["v1"]
            }
          },
          "response": []
        }
      ],
      "auth": {
        "type": "basic",
        "basic": [
          {
            "key": "password",
            "value": "{{customer_api_key}}",
            "type": "string"
          },
          {
            "key": "username",
            "value": "",
            "type": "string"
          }
        ]
      },
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        },
        {
          "listen": "test",
          "script": {
            "type": "text/javascript",
            "exec": [""]
          }
        }
      ]
    }
  ],
  "auth": {
    "type": "inherit"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "https://app-gaia.di.siemens.com",
      "type": "string"
    },
    {
      "key": "customer_api_key",
      "value": "55BYBU7ackLSdJguwKa7gyBlOrXN3Prf7Ggy",
      "type": "string"
    }
  ]
}
